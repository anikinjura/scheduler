# Техническое задание на ревизию кода

## Ревизия архитектуры и модулей: задачи и рекомендации

### 1. Общая структура и назначение модулей

#### 1.1 Обзор архитектуры проекта

```
scheduler/                                # Корень проекта
├── config/                               # Общие конфигурационные файлы
│   └── base_config.py                    # PVZ_ID, ENV_MODE, пути и ENV-переменные
│
├── scheduler_runner/                     # Движок запуска задач
│   ├── runner.py                         # Точка входа: парсит --user, фильтрует и запускает задачи
│   ├── schedule_config.py                # Описание SCHEDULE: скрипты, аргументы, расписания, пользователи
│   ├── utils/                            # Вспомогательные модули
│   │   ├── logging.py                    # configure_logger: настраивает логи в logs/{user}/{domain_name}
│   │   ├── timing.py                     # should_run_now: проверка «hourly»/«daily + время»
│   │   ├── subprocess.py                 # run_subprocess: запуск скриптов с прокидкой ENV
│   │   └── notifications.py              # Telegram-сервис для отправки уведомлений
│   └── tasks/                            # Доменные подпакеты задач
│       ├── cameras/                      # Задачи видеонаблюдения
│       │   ├── CleanupScript.py
│       │   ├── CopyScript.py
│       │   ├── CloudMonitorScript.py
│       │   ├── VideoMonitorScript.py
│       │   └── config/
│       │       └── cameras_config.py     # TASK_SCHEDULE или SCHEDULE: описание расписания обхода камер
│       ├── system_updates/               # Задачи обновления ОС
│       │   ├── UpdateOS.py
│       │   └── config/
│       │       └── system_updates_config.py
│       └── common/                       # Общие задачи/утилиты (при необходимости)
│
├── logs/                                 # Логи: logs/{user}/{TaskDomain}_{TaskName}/YYYY-MM-DD.log
├── tests/                                # Юнит- и интеграционные тесты
├── docs/                                 # архитектура, инструкция по настройке Task Scheduler
│   └── architecture.md
├── pvz_config.ini                        # INI-файл с PVZ_ID и ENV_MODE (production/test)
├── requirements.txt                      # зависимые пакеты
└── README.md                             # обзор проекта и инструкции по развёртыванию
```

- **`runner.py`** — точка входа, отвечает за парсинг аргументов, фильтрацию задач, запуск по расписанию, логирование.
- **`schedule_config.py`** — динамически собирает и валидирует расписание задач из подпакетов, предоставляет API для доступа к задачам.
- **`logging.py`** — централизованная настройка логирования с ротацией, поддержка detailed-логов, очистка старых файлов.
- **`subprocess.py`** — безопасный запуск подпроцессов с lock-файлами, прокидкой ENV, таймаутами, логированием stdout/stderr.
- **`timing.py`** — проверка, пора ли запускать задачу (hourly/daily/once).

---

### 2. Техническое задание на ревизию и доработку

#### 2.1 runner.py

**Проверить и доработать:**
- Корректность фильтрации задач по `user` и `task` (учесть регистр, уникальность, отсутствие задачи).
- Логирование: убедиться, что все ключевые этапы (старт, ошибки, завершение) логируются корректно.
- Обработка ошибок: все исключения должны логироваться, а не только выводиться в консоль.
- Корректная работа с кодами завершения (exit code).
- Проверить, что detailed-логирование действительно включает DEBUG для нужных задач.
- Проверить корректность передачи рабочей директории и ENV в `run_subprocess`.
- Добавить/уточнить вывод краткой статистики по задачам (успешно/ошибка).

#### 2.2 schedule_config.py

**Проверить и доработать:**
- Корректность поиска и импорта всех конфигов задач (`tasks/*/config/*_config.py`).
- Валидация: все обязательные поля, корректность расписания, формат времени.
- Обработка ошибок импорта и валидации — логировать с деталями, не прерывать загрузку всех задач из-за одной ошибки.
- Корректная агрегация ENV: приоритеты, преобразование типов, отсутствие `None`.
- Проверить, что `reload_schedule()` корректно обновляет расписание без side-effect.
- Убедиться, что `SCHEDULE` всегда валиден после импорта.
- Добавить/уточнить docstring-и и примеры использования функций.

#### 2.3 logging.py

**Проверить и доработать:**
- Исключить дублирование хендлеров при повторных вызовах `configure_logger`.
- Проверить корректность структуры логов: `logs/{user}/{task_name}/YYYY-MM-DD.log`.
- Проверить работу detailed-логов (DEBUG) и ротацию файлов.
- Очистка старых логов: убедиться, что не удаляются актуальные файлы, корректно работает с датами.
- Добавить возможность логировать в консоль (опционально, для отладки).
- Проверить thread-safety при параллельных запусках.

#### 2.4 subprocess.py

**Проверить и доработать:**
- Надёжность lock-файлов: корректная очистка, обработка падения процесса.
- Проверить, что ENV полностью прокидывается, все значения — строки.
- Логирование stdout/stderr: не терять сообщения, корректно обрабатывать большие логи.
- Таймаут: корректное завершение зависших процессов.
- Проверить работу на Windows (`pythonw`, пути, kill).
- Обработка ошибок запуска: подробный лог, возврат `False` при любой ошибке.
- Возможность указать рабочую директорию (`working_dir`).

#### 2.5 timing.py

**Проверить и доработать:**
- Корректная обработка расписаний: `hourly`, `daily` (строгое сравнение времени), `once` (резерв).
- Валидация формата времени: строгий HH:MM, диапазоны.
- Ясные сообщения об ошибках при неверном расписании.
- Возможность расширения (например, `interval`, cron-like).

---

### 3. Общие рекомендации

- **Документировать** все публичные функции и классы (docstring, примеры).
- **Покрыть юнит-тестами**: сценарии запуска, ошибки конфигов, ENV, таймауты, логирование.
- **Проверить работу на разных версиях Python** (3.10+), на Windows.
- **Обеспечить читаемость логов**: ключевые события, ошибки, параметры запуска.
- **Обеспечить безопасность**: не хранить чувствительные данные в логах, корректно очищать ENV.
- **Проверить совместимость с Windows Task Scheduler**: отсутствие блокирующих окон, корректный exit code.

---

**Результат ревизии** — исправленные и доработанные модули, подробные логи, стабильная работа планировщика, удобство поддержки и расширения.